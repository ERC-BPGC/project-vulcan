How to install gpu support for linux. (i am using ubuntu 22, python 3.10, rtx 3050 4gb, intel i7 12g)

1. Take backup
2. Remove any relevant installs:


sudo bash -c "echo 'blacklist nouveau' > /etc/modprobe.d/blacklist-nouveau.conf"
sudo bash -c "echo 'options nouveau modeset=0' >> /etc/modprobe.d/blacklist-nouveau.conf"

sudo apt-get --purge remove "*nvidia*"
sudo apt-get --purge remove "*cuda*"
sudo apt-get --purge remove "*cublas*" "cuda*" "nsight*"
sudo apt-get autoremove
sudo apt-get autoclean

sudo update-initramfs -u

sudo reboot

3. Now install basic nvidia driver

sudo apt-get update
sudo apt-get install nvidia-driver-535 (535 is for rtx 3050 search your releveant one)

4. Fix broken packages: 
sudo apt-get install -f
sudo apt-mark showhold


5. find the cuda version for your gpu (12.2 for mine):
https://developer.nvidia.com/cuda-12-2-0-download-archive
follow the steps for deb(local) > best way

do everthing in the /home/user/ folder

6. Add Env varibles
echo $PATH
echo $LD_LIBRARY_PATH
echo 'export PATH=/usr/local/cuda-12.2/bin${PATH:+:${PATH}}' >> ~/.bashrc
echo 'export LD_LIBRARY_PATH=/usr/local/cuda-12.2/lib64${LD_LIBRARY_PATH:+:${LD_LIBRARY_PATH}}' >> ~/.bashrc

sudo reboot

7. Check if cuda is installed:
source ~/.bashrc
nvcc --version
something like:
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2023 NVIDIA Corporation
Built on Tue_Jun_13_19:16:58_PDT_2023
Cuda compilation tools, release 12.2, V12.2.91
Build cuda_12.2.r12.2/compiler.32965470_0

should come.

8. find the cudnn version for your cuda from here: (9.2 for mine)
https://docs.nvidia.com/deeplearning/cudnn/latest/reference/support-matrix.html
download cudnn from here:
https://developer.nvidia.com/cudnn-downloads


dpkg -l | grep cudnn
this should show atlest:
ii  cudnn9-cuda-12                                     9.2.0.82-1                                        amd64        NVIDIA cuDNN for CUDA 12

with ii in the start.

sudo reboot for cudnn installation if you get random errors.

sudo apt-get install libcudnn8
sudo apt-get install libcudnn8-dev

incase of package not found,

wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/cuda-ubuntu2004.pin
sudo mv cuda-ubuntu2004.pin /etc/apt/preferences.d/cuda-repository-pin-600
export last_public_key=3bf863cc # SEE NOTE BELOW
sudo apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/${last_public_key}.pub
sudo add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"
sudo apt-get update
sudo apt-get install libcudnn8
sudo apt-get install libcudnn8-dev

now if libcudnn gets installed, you are done with cudnn installation.

9. Install NVIDIA Video Codec SDK
from https://developer.nvidia.com/video-codec-sdk
refer https://www.youtube.com/watch?v=zap4k6LKnYA

9. Now we build opencv!

pip3 uninstall opencv-python

sudo apt-get update
sudo apt-get install build-essential cmake git libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev
sudo apt-get install libgstreamer-plugins-base1.0-dev libgstreamer1.0-dev libgl1-mesa-dev libglu1-mesa-dev
sudo apt-get install python3-dev python3-numpy libtbb2 libtbb-dev libjpeg-dev libpng-dev libtiff-dev libdc1394-22-dev

sudo apt-get install libdc1394-dev

git clone https://github.com/opencv/opencv.git
git clone https://github.com/opencv/opencv_contrib.git
cd opencv_contrib
git checkout <opencv_version>  # Replace <opencv_version> with the version you want to build (e.g., 4.5.5)
cd ..

cd opencv
git checkout <opencv_version>  # Replace <opencv_version> with the version you want to build (e.g., 4.5.5)
mkdir build
cd build


# Configure with CUDA and cuDNN support
cmake .. -DOPENCV_EXTRA_MODULES_PATH=../opencv_contrib/modules \
         -DWITH_CUDA=ON \
         -DCUDA_ARCH_BIN=8.6 \   (replace 8.6 with compute capablity of your gpu)
         -DCUDA_ARCH_PTX="" \
         -DCUDA_FAST_MATH=ON \
         -DCUDNN_VERSION=9.2.0 \
         -DCUDNN_INCLUDE_DIR=/usr/include \
         -DCUDNN_LIBRARY=/usr/lib/aarch64-linux-gnu/libcudnn.so.9.2.0 \
         -DBUILD_opencv_python2=OFF \
         -DBUILD_opencv_python3=ON \
         -DPYTHON_DEFAULT_EXECUTABLE=$(which python3) \
         -DWITH_GSTREAMER=ON \
         -DWITH_LIBV4L=ON \
         -DENABLE_FAST_MATH=ON \
         -DCMAKE_BUILD_TYPE=RELEASE \
         -DBUILD_EXAMPLES=OFF \
         -DBUILD_TESTS=OFF \
         -DBUILD_PERF_TESTS=OFF

# Adjust options as per your specific requirements

make -j10 (replace 10 with no of your cpu cores) (this is for building)
sudo make install
sudo ldconfig


if you mess up, uninstall cudnn and do again.

if you get this error: 
"CMake Error at modules/dnn/CMakeLists.txt:53 (message):
  DNN: CUDA backend requires cuDNN.  Please resolve dependency or disable
  OPENCV_DNN_CUDA=OFF"
  
  It means cudnn install is improper/incomplete/not supported. So delete and install again (best)
  
To test for sucessful build:

python3
import cv2
print(cv2.__version__)
print(cv2.getBuildInformation())
cv2.cuda.getCudaEnabledDeviceCount()

last one should print 1

If you made it so far congratulations! its easy now.

sudo rm -rf ~/opencv
sudo rm -rf ~/opencv_contrib


10. Now we build dlib!


pip3 uninstall dlib
sudo python3 setup.py install --set USE_AVX_INSTRUCTIONS=1 --set DLIB_USE_CUDA=1

cd
git clone https://github.com/davisking/dlib.git
cd dlib
mkdir build
cd build
cmake .. -DDLIB_USE_CUDA=1 -DUSE_AVX_INSTRUCTIONS=1
cmake --build .
sudo make install
sudo ldconfig
cd ../
python3 setup.py install --set USE_AVX_INSTRUCTIONS=1 --set DLIB_USE_CUDA=1


incase of an error write
python3 setup.py install --set USE_AVX_INSTRUCTIONS=1 --set DLIB_USE_CUDA=1 --user
and retry

test with:
import dlib
print("Dlib version:", dlib.__version__)
print("CUDA support:", dlib.DLIB_USE_CUDA)

sudo rm -rf ~/dlib

11. Now we build tensorflow!

pip3 uninstall tensorflow
python3 -m pip install tensorflow[and-cuda]

to test:
import tensorflow as tf

# Check if TensorFlow can access GPU
print("Num GPUs Available:", len(tf.config.experimental.list_physical_devices('GPU')))


12. Now we build pytorch!

pip3 uninstall torch torchvision torchaudio
rm -rf ~/.cache/torch
pip3 list | grep torch

this should be empty

pip3 install torch torchvision torchaudio -f https://download.pytorch.org/whl/cu12.2/torch_stable.html

this is for cuda 12.2 choose link accordingly

to test:
import torch
print(torch.__version__)
print(torch.cuda.is_available())


if you get "ImportError: libcudnn.so.8: cannot open shared object file: No such file or directory"
while doing import torch
then do:

sudo rm /usr/lib/x86_64-linux-gnu/libcudnn.so.8
sudo ln -s /usr/lib/x86_64-linux-gnu/libcudnn.so.9.2.0 /usr/lib/x86_64-linux-gnu/libcudnn.so.8

/usr/lib/x86_64-linux-gnu is the place where your libcudnn should be present


sudo apt-cache policy libcudnn8
and then install the appropriate version.

If you make it so far, congratulations. Your done!

GG. 
Happy computer vision at good fps.
